name: Deploy work flow for Amazon ECS

on:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  IMAGE_TAG: ${{ github.sha }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}

jobs:
  deoploy:
    name: deoploy
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: package install
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: api push to ECR
        id: build-image-api
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd api
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_API_REPOSITORY }}:$IMAGE_TAG . --no-cache
          docker tag $ECR_REGISTRY/${{ secrets.AWS_API_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.AWS_API_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.AWS_API_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.AWS_API_REPOSITORY }}:$latest

      - name: client push to ECR
        id: build-image-client
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd client
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_CLIENT_REPOSITORY }}:$IMAGE_TAG . --no-cache
          docker tag $ECR_REGISTRY/${{ secrets.AWS_CLIENT_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.AWS_CLIENT_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.AWS_CLIENT_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.AWS_CLIENT_REPOSITORY }}:$latest

      - name: nginx push to ECR
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd nginx
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_NGINX_REPOSITORY }}:$IMAGE_TAG . --no-cache
          docker tag $ECR_REGISTRY/${{ secrets.AWS_NGINX_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.AWS_NGINX_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.AWS_NGINX_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.AWS_NGINX_REPOSITORY }}:$latest

      - name: mysql push to ECR
        id: build-image-mysql
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd mysql
          docker build -t $ECR_REGISTRY/${{ secrets.AWS_MYSQL_REPOSITORY }}:$IMAGE_TAG . --no-cache
          docker tag $ECR_REGISTRY/${{ secrets.AWS_MYSQL_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.AWS_MYSQL_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.AWS_MYSQL_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.AWS_MYSQL_REPOSITORY }}:$latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --service ${{ secrets.AWS_ECS_SERVIE }} --cluster ${{ secrets.AWS_ECS_CLUSTER }} ---force-new-deployment

      - name: Success
        uses: rtCamp/action-slack-notify@v2.0.2
        if: success()
        env:
          SLACK_TITLE: Deploy flow / success
          SLACK_COLOR: good
          SLACK_MESSAGE: Message for success

      - name: Failure
        uses: rtCamp/action-slack-notify@v2.0.2
        if: failure()
        env:
          SLACK_TITLE: Deploy flow / failure
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for failure

      - name: Cancel
        uses: rtCamp/action-slack-notify@v2.0.2
        if: cancelled()
        env:
          SLACK_TITLE: Deploy flow / cancel
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for cancel
