// Code generated by MockGen. DO NOT EDIT.
// Source: awsS3handler.go

// Package mock_awsS3handlers is a generated GoMock package.
package mock_awsS3handlers

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	awsS3handlers "github.com/kory-jp/react_golang_mux/api/interfaces/controllers"
)

// MockS3 is a mock of S3 interface.
type MockS3 struct {
	ctrl     *gomock.Controller
	recorder *MockS3MockRecorder
}

// MockS3MockRecorder is the mock recorder for MockS3.
type MockS3MockRecorder struct {
	mock *MockS3
}

// NewMockS3 creates a new mock instance.
func NewMockS3(ctrl *gomock.Controller) *MockS3 {
	mock := &MockS3{ctrl: ctrl}
	mock.recorder = &MockS3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3) EXPECT() *MockS3MockRecorder {
	return m.recorder
}

// ImageUploader mocks base method.
func (m *MockS3) ImageUploader(arg0 *http.Request) (awsS3handlers.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageUploader", arg0)
	ret0, _ := ret[0].(awsS3handlers.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageUploader indicates an expected call of ImageUploader.
func (mr *MockS3MockRecorder) ImageUploader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageUploader", reflect.TypeOf((*MockS3)(nil).ImageUploader), arg0)
}

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// ETag mocks base method.
func (m *MockResult) ETag() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ETag")
	ret0, _ := ret[0].(*string)
	return ret0
}

// ETag indicates an expected call of ETag.
func (mr *MockResultMockRecorder) ETag() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ETag", reflect.TypeOf((*MockResult)(nil).ETag))
}

// Location mocks base method.
func (m *MockResult) Location() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(string)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockResultMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockResult)(nil).Location))
}

// UploadID mocks base method.
func (m *MockResult) UploadID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UploadID indicates an expected call of UploadID.
func (mr *MockResultMockRecorder) UploadID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadID", reflect.TypeOf((*MockResult)(nil).UploadID))
}

// VersionID mocks base method.
func (m *MockResult) VersionID() *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionID")
	ret0, _ := ret[0].(*string)
	return ret0
}

// VersionID indicates an expected call of VersionID.
func (mr *MockResultMockRecorder) VersionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionID", reflect.TypeOf((*MockResult)(nil).VersionID))
}
