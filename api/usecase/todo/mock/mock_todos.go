// Code generated by MockGen. DO NOT EDIT.
// Source: todo_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/kory-jp/react_golang_mux/api/domain"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// ChangeBoolean mocks base method.
func (m *MockTodoRepository) ChangeBoolean(arg0, arg1 int, arg2 domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBoolean", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeBoolean indicates an expected call of ChangeBoolean.
func (mr *MockTodoRepositoryMockRecorder) ChangeBoolean(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBoolean", reflect.TypeOf((*MockTodoRepository)(nil).ChangeBoolean), arg0, arg1, arg2)
}

// Erasure mocks base method.
func (m *MockTodoRepository) Erasure(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Erasure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Erasure indicates an expected call of Erasure.
func (mr *MockTodoRepositoryMockRecorder) Erasure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Erasure", reflect.TypeOf((*MockTodoRepository)(nil).Erasure), arg0, arg1)
}

// FindByIdAndUserId mocks base method.
func (m *MockTodoRepository) FindByIdAndUserId(arg0, arg1 int) (*domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdAndUserId", arg0, arg1)
	ret0, _ := ret[0].(*domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdAndUserId indicates an expected call of FindByIdAndUserId.
func (mr *MockTodoRepositoryMockRecorder) FindByIdAndUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdAndUserId", reflect.TypeOf((*MockTodoRepository)(nil).FindByIdAndUserId), arg0, arg1)
}

// FindByTagId mocks base method.
func (m *MockTodoRepository) FindByTagId(arg0, arg1, arg2 int) (domain.Todos, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTagId", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Todos)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByTagId indicates an expected call of FindByTagId.
func (mr *MockTodoRepositoryMockRecorder) FindByTagId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTagId", reflect.TypeOf((*MockTodoRepository)(nil).FindByTagId), arg0, arg1, arg2)
}

// FindByUserId mocks base method.
func (m *MockTodoRepository) FindByUserId(arg0, arg1 int) (domain.Todos, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].(domain.Todos)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockTodoRepositoryMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockTodoRepository)(nil).FindByUserId), arg0, arg1)
}

// TransOverwrite mocks base method.
func (m *MockTodoRepository) TransOverwrite(arg0 *sql.Tx, arg1 domain.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransOverwrite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransOverwrite indicates an expected call of TransOverwrite.
func (mr *MockTodoRepositoryMockRecorder) TransOverwrite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransOverwrite", reflect.TypeOf((*MockTodoRepository)(nil).TransOverwrite), arg0, arg1)
}

// TransStore mocks base method.
func (m *MockTodoRepository) TransStore(arg0 *sql.Tx, arg1 domain.Todo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransStore", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransStore indicates an expected call of TransStore.
func (mr *MockTodoRepositoryMockRecorder) TransStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransStore", reflect.TypeOf((*MockTodoRepository)(nil).TransStore), arg0, arg1)
}
