// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSqlHandler is a mock of SqlHandler interface.
type MockSqlHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSqlHandlerMockRecorder
}

// MockSqlHandlerMockRecorder is the mock recorder for MockSqlHandler.
type MockSqlHandlerMockRecorder struct {
	mock *MockSqlHandler
}

// NewMockSqlHandler creates a new mock instance.
func NewMockSqlHandler(ctrl *gomock.Controller) *MockSqlHandler {
	mock := &MockSqlHandler{ctrl: ctrl}
	mock.recorder = &MockSqlHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlHandler) EXPECT() *MockSqlHandlerMockRecorder {
	return m.recorder
}

// DoInTx mocks base method.
func (m *MockSqlHandler) DoInTx(f func(*sql.Tx) (interface{}, error)) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTx", f)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoInTx indicates an expected call of DoInTx.
func (mr *MockSqlHandlerMockRecorder) DoInTx(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTx", reflect.TypeOf((*MockSqlHandler)(nil).DoInTx), f)
}
